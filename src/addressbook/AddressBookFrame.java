/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package addressbook;

import static addressbook.AddressBook.contactList;
import addressbook.database.dao.ContactDAO;
import addressbook.subject.contact.Contact;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import addressbook.listeners.IAddEditContactListener;
import javax.swing.table.TableModel;

/**
 *
 * @author Igor Gayvan
 */
public class AddressBookFrame extends javax.swing.JFrame {

    static List<Contact> contactList = new ArrayList<Contact>();

    ContactDAO contactDAO = new ContactDAO();

    /**
     * Creates new form jfAddressBook
     */
    public AddressBookFrame() {
        initComponents();

        setLocationRelativeTo(null);

        jtContacts.setModel(GetDataForGrid());
        jtContacts.requestFocus();
        jtContacts.getSelectionModel().setSelectionInterval(0, 0);

        UIManager.put("OptionPane.okButtonText", "Понятно");
    }

    private DefaultTableModel GetDataForGrid() {
        DefaultTableModel defaultTableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (getColumnName(column).equalsIgnoreCase("id")) {
                    return false;
                }

                return super.isCellEditable(row, column);
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (!getDataVector().isEmpty()) {
                    Vector cells = (Vector) getDataVector().get(0);
                    Object get = cells.get(columnIndex);
                    if (get != null) {
                        return get.getClass();
                    }
                }

                return super.getColumnClass(columnIndex);
            }

        };

        contactList = contactDAO.selectAll();

        Vector<String> columns = new Vector<>();
        columns.add("ID");
        columns.add("Полное наименование");
        columns.add("Skype");
        columns.add("Телефон");
        columns.add("Email");

        Vector<Vector> rows = new Vector<>();

        for (Contact contact : contactList) {
            Vector<Object> cells = new Vector<>();

            cells.add(contact.getId());
            cells.add(contact.getNameFull());
            cells.add(contact.getSkype());
            cells.add(contact.getPhone());
            cells.add(contact.getEmail());

            rows.add(cells);
        }

        defaultTableModel.setDataVector(rows, columns);

        return defaultTableModel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jbAdd = new javax.swing.JButton();
        jbEdit = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jbView = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jbFind = new javax.swing.JButton();
        jbSort = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtContacts = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Список контактов");
        setName("jfrContactList"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 768));

        jToolBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jbAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addressbook/images/add.png"))); // NOI18N
        jbAdd.setToolTipText("Добавить");
        jbAdd.setBorderPainted(false);
        jbAdd.setFocusPainted(false);
        jbAdd.setFocusable(false);
        jbAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddActionPerformed(evt);
            }
        });
        jToolBar1.add(jbAdd);

        jbEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addressbook/images/edit_blue.png"))); // NOI18N
        jbEdit.setToolTipText("Изменить");
        jbEdit.setBorderPainted(false);
        jbEdit.setFocusPainted(false);
        jbEdit.setFocusable(false);
        jbEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditActionPerformed(evt);
            }
        });
        jToolBar1.add(jbEdit);

        jbDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addressbook/images/delete.png"))); // NOI18N
        jbDelete.setToolTipText("Удалить");
        jbDelete.setBorderPainted(false);
        jbDelete.setFocusPainted(false);
        jbDelete.setFocusable(false);
        jbDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(jbDelete);

        jbView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addressbook/images/view_yellow.png"))); // NOI18N
        jbView.setToolTipText("Просмотр");
        jbView.setBorderPainted(false);
        jbView.setFocusPainted(false);
        jbView.setFocusable(false);
        jbView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbViewActionPerformed(evt);
            }
        });
        jToolBar1.add(jbView);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addressbook/images/refresh.png"))); // NOI18N
        jbRefresh.setToolTipText("Искать");
        jbRefresh.setBorderPainted(false);
        jbRefresh.setFocusPainted(false);
        jbRefresh.setFocusable(false);
        jbRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(jbRefresh);

        jbFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addressbook/images/search.png"))); // NOI18N
        jbFind.setToolTipText("Искать");
        jbFind.setBorderPainted(false);
        jbFind.setFocusPainted(false);
        jbFind.setFocusable(false);
        jbFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFindActionPerformed(evt);
            }
        });
        jToolBar1.add(jbFind);

        jbSort.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addressbook/images/sort.png"))); // NOI18N
        jbSort.setToolTipText("Сортировать");
        jbSort.setBorderPainted(false);
        jbSort.setFocusPainted(false);
        jbSort.setFocusable(false);
        jbSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSortActionPerformed(evt);
            }
        });
        jToolBar1.add(jbSort);

        jbExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addressbook/images/exit.png"))); // NOI18N
        jbExit.setToolTipText("Выйти");
        jbExit.setBorderPainted(false);
        jbExit.setFocusPainted(false);
        jbExit.setFocusable(false);
        jbExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExitActionPerformed(evt);
            }
        });
        jToolBar1.add(jbExit);

        jtContacts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtContacts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jtContacts);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddActionPerformed
        Contact contact = new Contact();
        AddEditContactDialog addEditContactDialog = new AddEditContactDialog(contact, EModeAddEditForm.ADD);

        addEditContactDialog.setLocationRelativeTo(this);
        addEditContactDialog.setVisible(true);

        addEditContactDialog.addActionListener(new IAddEditContactListener() {
            @Override
            public void addNewContact() {
                try {
                    switch (addEditContactDialog.getModeAddEditForm()) {
                        case ADD: {
                            contactDAO.insert(addEditContactDialog.getContact());
                            break;
                        }
                        case EDIT: {
                            contactDAO.update(addEditContactDialog.getContact());
                            break;
                        }
                    }

                    addEditContactDialog.setResult(true);
                } catch (Throwable t) {
                    System.err.println("Ошибка при обновлении таблицы\n" + t);
                }
            }
        });

        if (addEditContactDialog.getResult()) {
            contact = addEditContactDialog.getContact();
            contactList.add(contact);

            DefaultTableModel model = (DefaultTableModel) jtContacts.getModel();
            Vector<Object> rowData = new Vector<>();

            rowData.add(contact.getId());
            rowData.add(contact.getNameFull());
            rowData.add(contact.getSkype());
            rowData.add(contact.getPhone());
            rowData.add(contact.getEmail());

            model.addRow(rowData);
            jtContacts.getSelectionModel().setSelectionInterval(model.getRowCount() - 1, model.getRowCount() - 1);
        }
    }//GEN-LAST:event_jbAddActionPerformed

    private void jbExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExitActionPerformed
        dispose();
    }//GEN-LAST:event_jbExitActionPerformed

    private void jbEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditActionPerformed
        int curRow = jtContacts.getSelectedRow();
        if (curRow == -1) {
            JOptionPane.showMessageDialog(this, "Выберите строку для редактирования", "Предупреждение", JOptionPane.OK_OPTION);
            return;
        }

        int id = (int) jtContacts.getModel().getValueAt(curRow, 0);
        int indexOfCurContact = contactList.indexOf(new Contact(id));

//        Contact contact = contactList.get(indexOfCurContact);
        Contact contact = contactDAO.findEntityById(id);

        AddEditContactDialog addEditContactDialog = new AddEditContactDialog(contact, EModeAddEditForm.EDIT);

        addEditContactDialog.setLocationRelativeTo(this);
        addEditContactDialog.setVisible(true);

        if (addEditContactDialog.getResult()) {
            contactList.set(indexOfCurContact, addEditContactDialog.getContact());

            jtContacts.getModel().setValueAt(contact.getNameFull(), curRow, 1);
            jtContacts.getModel().setValueAt(contact.getSkype(), curRow, 2);
            jtContacts.getModel().setValueAt(contact.getPhone(), curRow, 3);
            jtContacts.getModel().setValueAt(contact.getEmail(), curRow, 4);
        }
    }//GEN-LAST:event_jbEditActionPerformed

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRefreshActionPerformed
        jtContacts.setModel(GetDataForGrid());
        jtContacts.requestFocus();
        jtContacts.getSelectionModel().setSelectionInterval(0, 0);
    }//GEN-LAST:event_jbRefreshActionPerformed

    private void jbDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteActionPerformed
        int curRow = jtContacts.getSelectedRow();
        if (curRow == -1) {
            JOptionPane.showMessageDialog(this, "Выберите строку для удаления", "Предупреждение", JOptionPane.OK_OPTION);
            return;
        }

        int id = (int) jtContacts.getModel().getValueAt(curRow, 0);

        contactDAO.delete(id);
        contactList.removeIf(contact -> contact.getId() == id);
        DefaultTableModel model = (DefaultTableModel) jtContacts.getModel();
        model.removeRow(curRow);
        int tmp = model.getRowCount();

        jtContacts.getSelectionModel().setSelectionInterval(model.getRowCount() > curRow ? curRow : model.getRowCount() - 1, model.getRowCount() > curRow ? curRow : model.getRowCount() - 1);
    }//GEN-LAST:event_jbDeleteActionPerformed

    private void jbViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbViewActionPerformed
        JOptionPane.showMessageDialog(this, "Данный функционал еще не реализован", "Предупреждение", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_jbViewActionPerformed

    private void jbFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFindActionPerformed
        JOptionPane.showMessageDialog(this, "Данный функционал еще не реализован", "Предупреждение", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_jbFindActionPerformed

    private void jbSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSortActionPerformed
        JOptionPane.showMessageDialog(this, "Данный функционал еще не реализован", "Предупреждение", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_jbSortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddressBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddressBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddressBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddressBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddressBookFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbEdit;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbFind;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSort;
    private javax.swing.JButton jbView;
    private javax.swing.JTable jtContacts;
    // End of variables declaration//GEN-END:variables
}
